version: '3'
services:
  minio:
    image: minio/minio:latest
    container_name: minio-s3
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD}
      MINIO_DOMAIN: s3bkids.bebakids.com
      MINIO_SERVER_URL: https://s3bkids.bebakids.com
      MINIO_NOTIFY_WEBHOOK_ENABLE: "on"
      # Ovdje koristimo ime kontejnera umjesto localhost
      MINIO_NOTIFY_WEBHOOK_ENDPOINT: "http://image-resizer:3000/webhook"
    volumes:
      - /mnt/nas_storage:/data
    command: server --address ":9000" --console-address ":9001" /data
    restart: always
    networks:
      - app-network

  image-resizer:
    build:
      context: ./image-resizer
      dockerfile: Dockerfile
    container_name: image-resizer
    # Ne izlažemo port 3000 jer će mu pristupati samo drugi kontejneri
    environment:
      # Koristimo ime kontejnera umjesto localhost
      - MINIO_ENDPOINT=minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY=${MINIO_USER}
      - MINIO_SECRET_KEY=${MINIO_PASSWORD}
      - BUCKET_NAME=products
       # FTP konfiguracija za izvoz
      - ENABLE_FTP_EXPORT=${ENABLE_FTP_EXPORT:-true}
      - FTP_HOST=${FTP_HOST}
      - FTP_PORT=${FTP_PORT}
      - FTP_USER=${FTP_USER}
      - FTP_PASSWORD=${FTP_PASSWORD}
      - FTP_SECURE=${FTP_SECURE}
      - FTP_EXPORT_PATH=${FTP_EXPORT_PATH:-/}
      - EXTENSIONS_TO_EXPORT=${EXTENSIONS_TO_EXPORT:-.jpg}
      - SIZES_TO_EXPORT=${SIZES_TO_EXPORT:-large}
      - OVERWRITE_EXISTING=${OVERWRITE_EXISTING:-true}
    volumes:
      - ./image-resizer/temp:/usr/src/app/temp
    depends_on:
      - minio
    restart: always
    networks:
      - app-network

  ftp-sync:
    build:
      context: ./ftp-sync
      dockerfile: Dockerfile
    container_name: ftp-sync
    environment:
      # FTP konfiguracija ostaje ista
      - FTP_HOST=${FTP_HOST}
      - FTP_PORT=${FTP_PORT}
      - FTP_USER=${FTP_USER}
      - FTP_PASSWORD=${FTP_PASSWORD}
      - FTP_SECURE=${FTP_SECURE}
      - FTP_REMOTE_PATH=${FTP_REMOTE_PATH}

      # MinIO konfiguracija - koristimo ime kontejnera
      - MINIO_ENDPOINT=minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY=${MINIO_USER}
      - MINIO_SECRET_KEY=${MINIO_PASSWORD}
      - MINIO_BUCKET=products

      # Raspored pokretanja
      - CRON_SCHEDULE=${FTP_CRON_SCHEDULE:-0 */1 * * *}

      # Dodatne opcije
      - LOOKBACK_HOURS=${FTP_LOOKBACK_HOURS:-24}
      - DELETE_AFTER_UPLOAD=${FTP_DELETE_AFTER_UPLOAD:-false}

      # Nova environment varijabla za webhook URL
      - WEBHOOK_URL=http://image-resizer:3000/resize
    volumes:
      - ./ftp-sync/temp:/app/temp
    depends_on:
      - minio
      - image-resizer
    restart: always
    networks:
      - app-network
  mongodb:
    image: mongo:latest
    container_name: product-gallery-db
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    volumes:
      - mongo-data:/data/db
      # Dodajemo skriptu za inicijalizaciju baze
      - ./mongodb/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    restart: always
    networks:
      - app-network
  backend:
    build:
      context: ./product-gallery-backend
      dockerfile: Dockerfile
    container_name: product-gallery-backend
    ports:
      - "3500:3500"
    environment:
      # MongoDB konfiguracija
      - MONGO_USER=${MONGO_USER}
      - MONGO_PASSWORD=${MONGO_PASSWORD}
      - MONGO_HOST=mongodb
      - MONGO_PORT=27017
      - MONGO_DB_NAME=productgallery

      # MinIO konfiguracija
      - MINIO_ENDPOINT=minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY=${MINIO_USER}
      - MINIO_SECRET_KEY=${MINIO_PASSWORD}
      - MINIO_BUCKET=products

      # JWT i autentifikacija
      - JWT_SECRET=${JWT_SECRET:-bebakids}
      - JWT_EXPIRY=24h

      # Konfiguracija aplikacije
      - PORT=3500
      - NODE_ENV=development
      - PUBLIC_MINIO_URL=https://s3bkids.bebakids.com
    depends_on:
      - minio
      - mongodb
    restart: always
    networks:
      - app-network
  frontend:
    build:
      context: ./product-gallery-frontend
      dockerfile: Dockerfile
    container_name: product-gallery-frontend
    ports:
      - "8010:8010"  # Koristimo port 8080 umjesto 80
    depends_on:
      - backend
    restart: always
    networks:
      - app-network
volumes:
  mongo-data:
    driver: local

networks:
  app-network:
    driver: bridge